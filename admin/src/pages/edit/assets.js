import moment from "moment";
const dateFormat = "yyyy/mm/dd";

function setValues(data) {
  const res = {
    chasiNumber: data?.vehicle?.chasiNumber,
    bodyNumber: data?.vehicle?.bodyNumber,
    month: data?.vehicle?.month,
    weight: data?.vehicle?.weight,
    netWeight: data?.vehicle?.netWeight,
    enginePower: data?.vehicle?.enginePower,
    initialRegistrationDate: data?.vehicle?.initialRegistrationDate,
    stockWheelPosition: data?.vehicle?.stockWheelPosition,
    turbo: data?.vehicle?.turbo,
    cngBannerNumber: data?.gasCertificates?.cngCertificate?.bannerNumber,
    cngCertificateNumber: data?.gasCertificates?.cngCertificate?.certificateNumber,
    cngValidUntil: data?.gasCertificates?.cngCertificate ? moment(data?.gasCertificates?.cngCertificate?.validUntil) : null,
    cng: !data?.gasCertificates?.cngCertificate || typeof data?.gasCertificates?.cngCertificate === "object",
    lpg: !data?.gasCertificates?.lpgCertificate || typeof data?.gasCertificates?.lpgCertificate === "object",
    // lpg:data?.gasCertificates?.lpgCertificate,
    lpgBannerNumber: data?.gasCertificates?.lpgCertificate?.bannerNumber,
    lpgCertificateNumber: data?.gasCertificates?.lpgCertificate?.certificateNumber,
    lpgValidUntil: data?.gasCertificates?.lpgCertificate ? moment(data?.gasCertificates?.lpgCertificate?.validUntil) : null,
    //
    inspectionLine: data?.inspectionLine,
    specialPurpose: data?.vehicle?.specialPurpose,
    paymentChannel: data?.paymentChannel,
    paid: data?.paid,
    plateNumber: data?.vehicle?.plateNumber,
    ownerType: data?.owner?.ownerType,
    mobileNumber: data?.owner?.mobileNumber,
    identificationNumber: data?.owner?.identificationNumber,
    name: data?.owner?.name,
    address: data?.owner?.address,
    state: data?.state,
    testResult: data?.testResult,
    id: data?.id,
    registrationCardNumber: data?.vehicle?.registrationCardNumber,
    vehicleId: data?.vehicle?.vehicleId,
    vinCode: data?.vehicle?.vinCode,
    registrationDate: data?.vehicle?.registrationDate,
    mark: data?.vehicle?.mark,
    model: data?.vehicle?.model,
    year: data?.vehicle?.year,
    category: data?.vehicle?.category,
    engineVolume: data?.vehicle?.engineVolume,
    color: data?.vehicle?.color,
    fuelType: data?.vehicle?.fuelType,
    testType: data?.testType,
    bodyType: data?.vehicle?.bodyType,
    inspectionStartDate: data?.inspectionStartDate,
    inspectionDate: data?.inspectionDate,
    odometerValue: data?.vehicle?.odometerValue,
    odometerUnit: data?.vehicle?.odometerUnit,
    allDoorsCount: data?.vehicle?.allDoorsCount,
    doorsCount: data?.vehicle?.doorsCount,
    wheelPosition: data?.vehicle?.wheelPosition,
    stockCatalycConverter: data?.vehicle?.stockCatalycConverter,
    catalycConverter: data?.vehicle?.catalycConverter,
    tachograph: data?.vehicle?.tachograph,
    stockLambda: data?.vehicle?.stockLambda,
    speedLimiter: data?.vehicle?.speedLimiter,
    cylinderCount: data?.gasCertificates?.cylinderCount,
    rejectedDetails: data?.rejectedDetails,
    nextInspectionDate: data?.nextInspectionDate,
    comment: data?.comment,
  };
  return res;
}

export { setValues };

function sendValues(fieldValues, checkboxData) {
  console.log("field values", fieldValues);
  const newData = {
    id: fieldValues?.id,
    vehicle: {
      plateNumber: fieldValues?.plateNumber,
      registrationCardNumber: fieldValues?.registrationCardNumber ? fieldValues?.registrationCardNumber : "",
      vehicleId: fieldValues?.vehicleId,
      vinCode: fieldValues?.vinCode ? fieldValues?.vinCode : "",
      chasiNumber: fieldValues?.chasiNumber ?  fieldValues?.chasiNumber : "",
      mark: fieldValues?.mark ?  fieldValues?.mark : "",
      model: fieldValues?.model ?  fieldValues?.model : "",
      bodyType: fieldValues?.bodyType,
      bodyNumber: fieldValues?.bodyNumber ?  fieldValues?.bodyNumber : "",
      year: fieldValues?.year ?  fieldValues?.year : 0,
      month: fieldValues?.month ?  fieldValues?.month : 0,
      weight: fieldValues?.weight ?  fieldValues?.weight : 0,
      netWeight: fieldValues?.netWeight ?  fieldValues?.netWeight : 0,
      engineVolume: fieldValues?.engineVolume ?  fieldValues?.engineVolume : 0,
      enginePower: fieldValues?.enginePower ?  fieldValues?.enginePower : 0,
      color: fieldValues?.color ?  fieldValues?.color : "",
      odometerUnit: fieldValues?.odometerUnit,
      odometerValue: fieldValues?.odometerValue ?  fieldValues?.odometerValue : 0,
      registrationDate: fieldValues?.registrationDate ? fieldValues?.registrationDate : null,
      initialRegistrationDate: fieldValues?.initialRegistrationDate ?  fieldValues?.initialRegistrationDate : null,
      images: fieldValues?.images?.map((img) => img.name),
      category: fieldValues?.category ? fieldValues?.category : 0,
      fuelType: fieldValues?.fuelType ?  fieldValues?.fuelType : 1,
      wheelPosition: fieldValues?.wheelPosition ?  fieldValues?.wheelPosition : 0,
      stockWheelPosition: fieldValues?.stockWheelPosition ?  fieldValues?.stockWheelPosition : 0,
      allDoorsCount: fieldValues?.allDoorsCount ?  fieldValues?.allDoorsCount : 0,
      doorsCount: fieldValues?.doorsCount ?  fieldValues?.doorsCount : 0,
      
      stockLambda: fieldValues?.stockLambda ? fieldValues?.stockLambda : 0,
      stockCatalycConverter: fieldValues?.stockCatalycConverter,
      catalycConverter: fieldValues?.catalycConverter,
      speedLimiter: fieldValues?.speedLimiter,
      tachograph: fieldValues?.tachograph,
      turbo: fieldValues?.turbo,
      specialPurpose: fieldValues?.specialPurpose,
    },
    owner: {
      ownerType: fieldValues?.ownerType,
      name: fieldValues?.name,
      identificationNumber: fieldValues?.identificationNumber,
      mobileNumber: fieldValues?.mobileNumber,
      address: fieldValues?.address,
    },
    rejectedDetails: checkboxData ,
    gasCertificates: {
      cngCertificate:  fieldValues?.cng ? {
        bannerNumber: fieldValues?.cngBannerNumber ? fieldValues?.cngBannerNumber : "",
        certificateNumber: fieldValues?.cngCertificateNumber ? fieldValues?.cngCertificateNumber : "",
        validUntil: moment(fieldValues?.cngValidUntil).format('YYYY-MM-DD') !== 'Invalid date' ? moment(fieldValues?.cngValidUntil).format('YYYY-MM-DD') : null,
      }: fieldValues?.cng,
      lpgCertificate: fieldValues?.lpg ? {
        bannerNumber: fieldValues?.lpgBannerNumber === "" ? fieldValues?.lpgBannerNumber : "",
        certificateNumber: fieldValues?.lpgCertificateNumber ? fieldValues?.lpgCertificateNumber : "",
        validUntil: moment(fieldValues?.lpgValidUntil).format('YYYY-MM-DD') !== 'Invalid date' ? moment(fieldValues?.lpgValidUntil).format('YYYY-MM-DD') : null,
      } : fieldValues?.lpg,
      cylinderCount: fieldValues?.cylinderCount,
    },
    paymentChannel: fieldValues?.paymentChannel,
    paid: fieldValues?.paid,
    comment: fieldValues?.comment ? fieldValues?.comment : "",
    inspectionLine: fieldValues?.inspectionLine
  };
  return newData;
}

export { sendValues };
